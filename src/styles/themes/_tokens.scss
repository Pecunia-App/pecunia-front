// -----------------------------------------------------------------------------
// üé® Mapping & Fonctions utilitaires pour les Design Tokens Angular
// -----------------------------------------------------------------------------
// Ce fichier expose les fonctions SCSS pour acc√©der dynamiquement aux tokens
// selon le th√®me (light/dark) et centralise la logique de mapping.
//
// - themed($key, $theme-name) : r√©cup√®re la valeur d'un token pour un th√®me donn√©
// - themed-block($props-map) : applique plusieurs propri√©t√©s selon le th√®me
//
// Pourquoi ?
// - Centraliser la logique de theming
// - √âviter la duplication de styles
// - Faciliter la maintenance et l'√©volution du design system
// ----------------------------------------------------------------------------

@use 'sass:map';
@use 'tokens.map' as tokens-map;

$theme-names: (light, dark);

/// Retourne la valeur d'un token pour un th√®me donn√©
/// @param $key        Nom du token (ex: 'background-neutral-primary')
/// @param $theme-name Nom du th√®me ('light' ou 'dark')
/// @return            Valeur du token pour ce th√®me
@function themed($key, $theme-name) {
  $entry: map.get(tokens-map.$tokens, $key);
  @if $entry == null {
    @return null;
  }
  $value: map.get($entry, $theme-name);
  @if $value == null {
    @return null;
  }
  @return $value;
}

/// Applique dynamiquement plusieurs propri√©t√©s CSS selon le th√®me
/// @param $props-map  Map SCSS de propri√©t√©s et tokens (ex: (color: 'text-primary', background: 'background-neutral-primary'))
@mixin themed-block($props-map) {
  @each $theme-name in $theme-names {
    :host-context([data-theme='#{$theme-name}']) & {
      @each $prop, $token in $props-map {
        #{$prop}: themed($token, $theme-name);
      }
    }
  }
}
